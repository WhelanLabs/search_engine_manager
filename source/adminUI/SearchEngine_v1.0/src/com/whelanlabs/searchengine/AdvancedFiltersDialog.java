/*
 * AdvancedFiltersDialog.java
 *
 * Created on April 5, 2009, 9:31 PM
 */

package com.whelanlabs.searchengine;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import javax.swing.ListSelectionModel;

/**
 *
 * @author  john
 */
public class AdvancedFiltersDialog extends javax.swing.JDialog {

   String appRootDirectory = "";

   public AdvancedFiltersDialog(JFrame mainFrame, boolean b, String rootDirectory) {
        super(mainFrame, b);
        appRootDirectory = rootDirectory;
        initComponents();
        setValues();
   }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      dialogLabel = new javax.swing.JLabel();
      editCriteriaTextField = new javax.swing.JTextField();
      addCriteriaLineButton = new javax.swing.JButton();
      jScrollPane1 = new javax.swing.JScrollPane();
      advancedCriteriaList = new javax.swing.JList();
      removeCriteriaLineButton = new javax.swing.JButton();
      jSeparator1 = new javax.swing.JSeparator();
      cancelButton = new javax.swing.JButton();
      okButton = new javax.swing.JButton();
      moveUpButton = new javax.swing.JButton();
      moveDownButton = new javax.swing.JButton();
      jLabel1 = new javax.swing.JLabel();
      jLabel2 = new javax.swing.JLabel();

      setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
      org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.whelanlabs.searchengine.AdminUI.class).getContext().getResourceMap(AdvancedFiltersDialog.class);
      setTitle(resourceMap.getString("Form.title")); // NOI18N
      setName("Form"); // NOI18N

      dialogLabel.setFont(resourceMap.getFont("dialogLabel.font")); // NOI18N
      dialogLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
      dialogLabel.setText(resourceMap.getString("dialogLabel.text")); // NOI18N
      dialogLabel.setToolTipText(resourceMap.getString("dialogLabel.toolTipText")); // NOI18N
      dialogLabel.setName("dialogLabel"); // NOI18N

      editCriteriaTextField.setText(resourceMap.getString("editCriteriaTextField.text")); // NOI18N
      editCriteriaTextField.setName("editCriteriaTextField"); // NOI18N
      editCriteriaTextField.addFocusListener(new java.awt.event.FocusAdapter() {
         public void focusGained(java.awt.event.FocusEvent evt) {
            editCriteriaTextFieldFocusGained(evt);
         }
         public void focusLost(java.awt.event.FocusEvent evt) {
            editCriteriaTextFieldFocusLost(evt);
         }
      });

      addCriteriaLineButton.setText(resourceMap.getString("addCriteriaLineButton.text")); // NOI18N
      addCriteriaLineButton.setName("addCriteriaLineButton"); // NOI18N
      addCriteriaLineButton.setPreferredSize(new java.awt.Dimension(75, 23));
      addCriteriaLineButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            addCriteriaLineButtonActionPerformed(evt);
         }
      });

      jScrollPane1.setName("jScrollPane1"); // NOI18N

      advancedCriteriaList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
      advancedCriteriaList.setToolTipText(resourceMap.getString("advancedCriteriaList.toolTipText")); // NOI18N
      advancedCriteriaList.setName("advancedCriteriaList"); // NOI18N
      advancedCriteriaList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
         public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
            advancedCriteriaListValueChanged(evt);
         }
      });
      jScrollPane1.setViewportView(advancedCriteriaList);

      removeCriteriaLineButton.setText(resourceMap.getString("removeCriteriaLineButton.text")); // NOI18N
      removeCriteriaLineButton.setEnabled(false);
      removeCriteriaLineButton.setName("removeCriteriaLineButton"); // NOI18N
      removeCriteriaLineButton.setPreferredSize(new java.awt.Dimension(75, 23));
      removeCriteriaLineButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            removeCriteriaLineButtonActionPerformed(evt);
         }
      });

      jSeparator1.setName("jSeparator1"); // NOI18N

      cancelButton.setText(resourceMap.getString("cancelButton.text")); // NOI18N
      cancelButton.setName("cancelButton"); // NOI18N
      cancelButton.setPreferredSize(new java.awt.Dimension(80, 23));
      cancelButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            cancelButtonActionPerformed(evt);
         }
      });

      okButton.setText(resourceMap.getString("okButton.text")); // NOI18N
      okButton.setName("okButton"); // NOI18N
      okButton.setPreferredSize(new java.awt.Dimension(80, 23));
      okButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            okButtonActionPerformed(evt);
         }
      });

      moveUpButton.setText(resourceMap.getString("moveUpButton.text")); // NOI18N
      moveUpButton.setEnabled(false);
      moveUpButton.setName("moveUpButton"); // NOI18N
      moveUpButton.setPreferredSize(new java.awt.Dimension(75, 23));
      moveUpButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            moveUpButtonActionPerformed(evt);
         }
      });

      moveDownButton.setText(resourceMap.getString("moveDownButton.text")); // NOI18N
      moveDownButton.setEnabled(false);
      moveDownButton.setName("moveDownButton"); // NOI18N
      moveDownButton.setPreferredSize(new java.awt.Dimension(75, 23));
      moveDownButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            moveDownButtonActionPerformed(evt);
         }
      });

      jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
      jLabel1.setName("jLabel1"); // NOI18N

      jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
      jLabel2.setName("jLabel2"); // NOI18N

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addComponent(dialogLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 705, Short.MAX_VALUE)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createSequentialGroup()
                  .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(editCriteriaTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 538, Short.MAX_VALUE))
               .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 592, Short.MAX_VALUE))
            .addGap(18, 18, 18)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
               .addComponent(moveDownButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addComponent(removeCriteriaLineButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addComponent(moveUpButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addComponent(addCriteriaLineButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addContainerGap())
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 685, Short.MAX_VALUE)
            .addContainerGap())
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addContainerGap(517, Short.MAX_VALUE)
            .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap())
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createSequentialGroup()
                  .addComponent(dialogLabel)
                  .addGap(51, 51, 51)
                  .addComponent(jLabel1))
               .addGroup(layout.createSequentialGroup()
                  .addGap(40, 40, 40)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                     .addComponent(jLabel2)
                     .addComponent(addCriteriaLineButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(editCriteriaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createSequentialGroup()
                  .addComponent(moveUpButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(moveDownButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(removeCriteriaLineButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
               .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap())
      );

      pack();
   }// </editor-fold>//GEN-END:initComponents

private void addCriteriaLineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCriteriaLineButtonActionPerformed
   String text = editCriteriaTextField.getText();
   if (text.startsWith("+") || text.startsWith("-")) {
      ListModel listModel = advancedCriteriaList.getModel();
      int numItems = listModel.getSize();
      String[] a = new String[numItems + 1];
      for (int i = 0; i < numItems; i++) {
         a[i] = (String) listModel.getElementAt(i);
      }
      a[numItems] = text;
      advancedCriteriaList.setListData(a);
      advancedCriteriaList.setSelectedIndex(numItems);
   } else {
      JFrame mainFrame = AdminUI.getApplication().getMainFrame();
      JOptionPane.showMessageDialog(mainFrame,
              "Invalid filter criteria. Filter criteria must begin with either a '+' or '-' character.",
              "WhelanLabs Search Engine",
              JOptionPane.ERROR_MESSAGE);
   }
}//GEN-LAST:event_addCriteriaLineButtonActionPerformed

private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
   setVisible(false);
}//GEN-LAST:event_cancelButtonActionPerformed

private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
   setVisible(false);

   String advancedFiltersPropertiesFile = appRootDirectory + "/config/advancedFilters.properties";

   Properties properties = new Properties();

   ListModel model = advancedCriteriaList.getModel();
   int numRows = model.getSize();

   properties.setProperty("numEntries", Integer.toString(numRows));
   for (int i = 0; i < numRows; i++) {
      String value = (String) model.getElementAt(i);
      properties.setProperty("advancedFilter." + Integer.toString(i), value);
   }
   try {
      properties.store(new FileOutputStream(advancedFiltersPropertiesFile), null);
   } catch (IOException ex) {
      Logger.getLogger(AdvancedFiltersDialog.class.getName()).log(Level.SEVERE, null, ex);
   }

   TemplateUtils.rewriteUrlFilter(appRootDirectory);
}//GEN-LAST:event_okButtonActionPerformed

private void moveUpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveUpButtonActionPerformed
   int selectedIndex = advancedCriteriaList.getSelectedIndex();
   if (selectedIndex > 0) {
      Object selectedValue = advancedCriteriaList.getSelectedValue();
      ListModel listModel = advancedCriteriaList.getModel();
      Object upValue = listModel.getElementAt(selectedIndex-1);
      int numItems = listModel.getSize();
      String[] a = new String[numItems];
      for (int i = 0; i < numItems; i++) {
         a[i] = (String) listModel.getElementAt(i);
      }
      a[selectedIndex-1] = (String) selectedValue;
      a[selectedIndex] = (String) upValue;
      advancedCriteriaList.setListData(a);
      advancedCriteriaList.setSelectedIndex(selectedIndex-1);
   }
}//GEN-LAST:event_moveUpButtonActionPerformed

private void moveDownButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveDownButtonActionPerformed
   int selectedIndex = advancedCriteriaList.getSelectedIndex();
   ListModel listModel = advancedCriteriaList.getModel();
   int listSize = listModel.getSize();
   if ((selectedIndex >= 0) && (selectedIndex < (listSize-1) )) {
      Object selectedValue = advancedCriteriaList.getSelectedValue();
      
      Object upValue = listModel.getElementAt(selectedIndex+1);
      String[] a = new String[listSize];
      for (int i = 0; i < listSize; i++) {
         a[i] = (String) listModel.getElementAt(i);
      }
      a[selectedIndex+1] = (String) selectedValue;
      a[selectedIndex] = (String) upValue;
      advancedCriteriaList.setListData(a);
      advancedCriteriaList.setSelectedIndex(selectedIndex+1);
   }
}//GEN-LAST:event_moveDownButtonActionPerformed

private void removeCriteriaLineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeCriteriaLineButtonActionPerformed
   int selectedIndex = advancedCriteriaList.getSelectedIndex();
   ListModel listModel = advancedCriteriaList.getModel();
   int listSize = listModel.getSize();
   String[] a = new String[listSize-1];
   for (int i = 0; i < listSize-1; i++) {
      if(i>=selectedIndex) {
         a[i] = (String) listModel.getElementAt(i+1);
      } else {
         a[i] = (String) listModel.getElementAt(i);
      }
   }
   advancedCriteriaList.setListData(a);
   if(selectedIndex < listSize-1) {
      advancedCriteriaList.setSelectedIndex(selectedIndex);
   } else {
      advancedCriteriaList.setSelectedIndex(selectedIndex-1);
   }
   
   
}//GEN-LAST:event_removeCriteriaLineButtonActionPerformed

private void advancedCriteriaListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_advancedCriteriaListValueChanged
   int selectedIndex = advancedCriteriaList.getSelectedIndex();
   if(selectedIndex != -1) {
      // activate buttons
      moveUpButton.setEnabled(true);
      moveDownButton.setEnabled(true);
      removeCriteriaLineButton.setEnabled(true);
   } else {
      // deactivate buttons
      moveUpButton.setEnabled(false);
      moveDownButton.setEnabled(false);
      removeCriteriaLineButton.setEnabled(false);
   }
}//GEN-LAST:event_advancedCriteriaListValueChanged

private void editCriteriaTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_editCriteriaTextFieldFocusGained
   getRootPane().setDefaultButton(addCriteriaLineButton);
}//GEN-LAST:event_editCriteriaTextFieldFocusGained

private void editCriteriaTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_editCriteriaTextFieldFocusLost
   getRootPane().setDefaultButton(null);
}//GEN-LAST:event_editCriteriaTextFieldFocusLost

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AdvancedFiltersDialog dialog = new AdvancedFiltersDialog(new javax.swing.JFrame(), true, "");
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton addCriteriaLineButton;
   private javax.swing.JList advancedCriteriaList;
   private javax.swing.JButton cancelButton;
   private javax.swing.JLabel dialogLabel;
   private javax.swing.JTextField editCriteriaTextField;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JScrollPane jScrollPane1;
   private javax.swing.JSeparator jSeparator1;
   private javax.swing.JButton moveDownButton;
   private javax.swing.JButton moveUpButton;
   private javax.swing.JButton okButton;
   private javax.swing.JButton removeCriteriaLineButton;
   // End of variables declaration//GEN-END:variables

   private void setValues() {
      String advancedFiltersPropertiesFile = appRootDirectory + "/config/advancedFilters.properties";

      Properties properties = new Properties();
      try {
         properties.load(new FileInputStream(advancedFiltersPropertiesFile));
      } catch (IOException ex) {
         Logger.getLogger(AdvancedFiltersDialog.class.getName()).log(Level.SEVERE, null, ex);
      }
      ListModel model = advancedCriteriaList.getModel();
      int numRows = Integer.valueOf(properties.getProperty("numEntries"));
      String[] a = new String[numRows];

      for (int i = 0; i < numRows; i++) {
         String value = (String) model.getElementAt(i);
         String thisRow = properties.getProperty("advancedFilter." + Integer.toString(i));
         a[i] = thisRow;
      }

      advancedCriteriaList.setListData(a);
   }
}
